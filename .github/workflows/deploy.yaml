name: Deploy to EKS
on:
  push:
    tags:
      - "v*"

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            auth-service,
            user-service,
            notification-service,
            media-service,
            course-service,
            enrollment-service,
          ]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/learnsphere/${{ matrix.service }}:$IMAGE_TAG -f services/${{ matrix.service }}/Dockerfile services/${{ matrix.service }}
          docker push $ECR_REGISTRY/learnsphere/${{ matrix.service }}:$IMAGE_TAG

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set u Kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name learnsphere-eks-cluster
      - name: Test Kubernetes API Access
        run: |
          kubectl cluster-info

      - name: Deploy Infrastructure to EKS
        run: |
          kubectl apply -f infrastructure/kubernetes/base/ --validate=false --request-timeout=60s
          kubectl create secret generic auth-secrets --from-literal=JWT_SECRET='${{ secrets.JWT_SECRET }}' --from-literal=COOKIE_PARSER_SECRET='${{ secrets.COOKIE_PARSER_SECRET}}' --from-literal=JWT_REFRESH_SECRET='${{ secrets.JWT_REFRESH_SECRET}}' --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic media-service-secrets --from-literal=AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY}}' --from-literal=AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID}}' --dry-run=client -o yaml | kubectl apply -f -

      - name: Substitute Image Tags and Deploy Services
        run: |
          IMAGE_TAG=${{ github.sha}}
          for service_file in infrastructure/kubernetes/services/*.yaml; do 
            sed -i "s|image: learnsphere/.*:latest|image: ${{ secrets.ECR_REGISTRY }}/learnsphere/$(basename $service_file .yaml):$IMAGE_TAG|g" $service_file
          done

          kubectl apply -f infrastructure/kubernetes/services/
          kubectl apply -f infrastructure/kubernetes/ingress-service.yaml
