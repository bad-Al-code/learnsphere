import { eq } from 'drizzle-orm';
import { db } from '..';
import { NewPayment, Payment, UpdatePayment } from '../../types';
import { payments } from '../schema';

export class PaymentRepository {
  /**
   * Creates a new payment record.
   * @param data - The data for the new payment.
   * @returns The newly created payment object.
   */
  public static async create(data: NewPayment) {
    const [newPayment] = await db.insert(payments).values(data).returning();
    return newPayment;
  }

  /**
   * Finds a payment record by the Razorpay Order ID.
   * @param orderId The ID of the order generated by Razorpay.
   * @returns The payment object if found, otherwise undefined.
   */
  public static async findByRazorpayOrderId(
    orderId: string
  ): Promise<Payment | undefined> {
    return db.query.payments.findFirst({
      where: eq(payments.razorpayOrderId, orderId),
    });
  }

  /**
   * Updates a payment record by its internal ID.
   * @param id The internal UUID of the payment record.
   * @param data The data to update.
   * @returns The updated payment object.
   */
  public static async update(
    id: string,
    data: UpdatePayment
  ): Promise<Payment> {
    const [updatedPayment] = await db
      .update(payments)
      .set({ ...data, updatedAt: new Date() })
      .where(eq(payments.id, id))
      .returning();
    return updatedPayment;
  }
}
